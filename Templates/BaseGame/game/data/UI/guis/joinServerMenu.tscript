
function JoinServerMenu::onWake(%this)
{
   // Double check the status. Tried setting this the control
   // inactive to start with, but that didn't seem to work.
   // It's a hidden control now...
   //JoinServerJoinBtn.setActive(JS_serverList.rowCount() > 0);
   // Start a query to see what's out there.
   %this.query();

   JoinServerButtonHolder.setActive();

   //JoinServerMenuInputHandler.setFirstResponder();
}   

function JoinServerButtonHolder::onWake(%this)
{
   %this-->joinButton.set("btn_start", "Return", L("join"), "JoinServerMenu.join();");
   %this-->backButton.set("btn_b", "Escape", L("back"), "JoinServerMenu.backOut();");
   %this-->refreshButton.set("btn_y", "R", L("refresh"), "JoinServerMenu.refresh();");
   %this-->queryLANButton.set("btn_a", "Q", L("js_qry_lan"), "JoinServerMenu.queryLan();");
   %this-->queryInternetButton.set("btn_x", "E", L("js_qry_net"), "JoinServerMenu.query();");
}

function JoinServerMenuInputHandler::onInputEvent(%this, %device, %action, %state)
{
   if(%state)
      $activeMenuButtonContainer.processInputs(%device, %action);
}

//----------------------------------------
function JoinServerMenu::query(%this)
{
   queryMasterServer(
      0,          // Query flags
      $Client::GameTypeQuery,       // gameTypes
      $Client::MissionTypeQuery,    // missionType
      0,          // minPlayers
      100,        // maxPlayers
      0,          // maxBots
      2,          // regionMask
      0,          // maxPing
      100,        // minCPU
      0           // filterFlags
   );
}

//----------------------------------------
function JoinServerMenu::queryLan(%this)
{
   queryLANServers(
      $pref::Net::Port,      // lanPort for local queries
      0,          // Query flags
      $Client::GameTypeQuery,       // gameTypes
      $Client::MissionTypeQuery,    // missionType
      0,          // minPlayers
      100,        // maxPlayers
      0,          // maxBots
      2,          // regionMask
      0,          // maxPing
      100,        // minCPU
      0           // filterFlags
   );
}

//----------------------------------------
function JoinServerMenu::cancel(%this)
{
   cancelServerQuery();
   JS_queryStatus.setVisible(false);
}


//----------------------------------------
function JoinServerMenu::join(%this)
{
   cancelServerQuery();
   %index = JS_serverList.getSelectedId();

   JoinGame(%index);
}

//----------------------------------------
function JoinServerMenu::refresh(%this)
{
   cancelServerQuery();
   %index= JS_serverList.getSelectedId();

   // The server info index is stored in the row along with the
   // rest of displayed info.
   if( setServerInfo( %index ) )
      querySingleServer( $ServerInfo::Address, 0 );
}

//----------------------------------------
function JoinServerMenu::refreshSelectedServer( %this )
{
   querySingleServer( $JoinGameAddress, 0 );
}

//----------------------------------------
function JoinServerMenu::backOut(%this)
{
   cancelServerQuery();
   
   Canvas.popDialog(JoinServerMenu);
   if(isObject(JoinServerMenu.returnGui) && JoinServerMenu.returnGui.isMethod("onReturnTo"))    
      JoinServerMenu.returnGui.onReturnTo();  
}

//----------------------------------------
function JoinServerMenu::update(%this)
{
   // Copy the servers into the server list.
   JS_queryStatus.setVisible(false);
   JS_serverList.clear();
   %sc = getServerCount();
   for( %i = 0; %i < %sc; %i ++ ) {
      setServerInfo(%i);
      JS_serverList.addRow( %i,
         $ServerInfo::Name TAB
         $ServerInfo::Ping TAB
         $ServerInfo::PlayerCount @ "/" @ $ServerInfo::MaxPlayers TAB
         $ServerInfo::Version TAB
         $ServerInfo::MissionName
      );
   }
   JS_serverList.sort(0);
   JS_serverList.setSelectedRow(0);
   JS_serverList.scrollVisible(0);

   //JoinServerJoinBtn.setActive(JS_serverList.rowCount() > 0);
   JoinServerButtonHolder->joinButton.setActive(JS_serverList.rowCount() > 0);
} 

//----------------------------------------
function JoinServerMenu::localizeQueryStatus(%this, %rawText)
{  // onServerQueryStatus returns status as english plain text...
   %textTag = "";
   %param = "";
   switch$(%rawText)
   {
      case "Querying LAN servers":
         %textTag = "js_qs_qry_lan";
      case "Querying master server":
         %textTag = "js_qs_qry_main";
      case "Query favorites...":
         %textTag = "js_qs_qry_fav";
      case "Refreshing server...":
         %textTag = "js_qs_refresh";
      case "Switching master servers...":
         %textTag = "js_qs_switch_main";
      case "Retrying the master server...":
         %textTag = "js_qs_retry";
      case "No master servers found.":
         %textTag = "js_qs_no_main";
      case "No servers found.":
         %textTag = "js_qs_no_server";
      case "One server found.":
         %textTag = "js_qs_one_server";
      case "Waiting for lan servers...":
         %textTag = "js_qs_wait_lan";

      default:
         // If we get here, the message is either '%d servers found.',
         // 'Pinging servers: %d left...' or 'Querying servers: %d left...'.
         %firstWord = getWord(%rawText, 0);
         if (isInt(%firstWord))
         {
            %textTag = "js_qs_num_server";
            %param = %firstWord;
         }
         else if (%firstWord $= "Pinging")
         {
            %textTag = "js_qs_num_pings";
            %param = getWord(%rawText, 2);
         }
         else if (%firstWord $= "Querying")
         {
            %textTag = "js_qs_num_qrys";
            %param = getWord(%rawText, 2);
         }
   }

   if (%textTag $= "")
      return %rawText;
   else if (%param $= "")
      return L(%textTag);

   return buildString(L(%textTag), %param);
}

//----------------------------------------
function onServerQueryStatus(%status, %msg, %value)
{
	echo("ServerQuery: " SPC %status SPC %msg SPC %value);
	%msg = JoinServerMenu.localizeQueryStatus(%msg);
   // Update query status
   // States: start, update, ping, query, done
   // value = % (0-1) done for ping and query states
   if (!JS_queryStatus.isVisible())
      JS_queryStatus.setVisible(true);

   switch$ (%status) {
      case "start":
         JoinServerJoinBtn.setActive(false);
         JoinServerQryInternetBtn.setActive(false);
         JS_statusText.setText(%msg);
         JS_statusBar.setValue(0);
         JS_serverList.clear();

      case "ping":
         JS_statusText.setText(L("js_status_ping"));
         JS_statusBar.setValue(%value);

      case "query":
         JS_statusText.setText(L("js_status_qry"));
         JS_statusBar.setValue(%value);

      case "done":
         JoinServerQryInternetBtn.setActive(true);
         JS_queryStatus.setVisible(false);
         JS_status.setText(%msg);
         JoinServerMenu.update();
   }
}
